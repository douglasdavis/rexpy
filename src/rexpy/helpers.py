import enum
import os
import shutil
from pathlib import PosixPath
from typing import List


class RexStep(enum.Enum):
    N = 1
    WF = 2
    DP = 3
    R = 4
    I = 5


def selection_with_period(raw, only_1516=False, only_17=False, only_18=False):
    """Augment a selection to require a specific data taking period.

    Parameters
    ----------
    raw : str
        Raw selection string.
    only_1516 : bool
        Require 2015/2016
    only_17 : bool
        Require 2017
    only_18 : bool
        Require 2018

    Returns
    -------
    str
        Updated selection string
    """
    if only_1516:
        return f"({raw}) && (isMC16a == 1)"
    elif only_17:
        return f"({raw}) && (isMC16d == 1)"
    elif only_18:
        return f"({raw}) && (isMC16e == 1)"
    else:
        return raw


def copy_histograms(from_path, to_workspace):
    """Copy histograms generated by a previous `n` step.

    Parameters
    ----------
    from_path : str or os.PathLike
        Path where histograms live.
    to_workspace : pathlib.PosixPath
        Workspace path to copy histograms.

    """
    os.makedirs(to_workspace / "tW" / "Histograms")
    for entry in PosixPath(from_path).glob("*histos.root"):
        shutil.copyfile(
            entry, str(to_workspace / "tW" / "Histograms" / PosixPath(entry).name)
        )


def parse_steps(cl_arg: str) -> List[RexStep]:
    steps = []
    if "n" in cl_arg:
        steps.append(RexStep.N)
    if all(x in cl_arg for x in ["w", "f"]):
        steps.append(RexStep.WF)
    if all(x in cl_arg for x in ["d", "p"]):
        steps.append(RexStep.DP)
    if "r" in cl_arg:
        steps.append(RexStep.R)
    if "i" in cl_arg:
        steps.append(RexStep.I)
    return steps

s
